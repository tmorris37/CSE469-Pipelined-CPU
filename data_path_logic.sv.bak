// this code is written for CSE 469 Lab 3, Summer 2024
// Copyright @ 2024 Jason Zhao, Timothy Morris

// this code is responsible for setting the data path logics

`timescale 1ns/10ps
module data_path_logic (
    input  logic [10:0] opcode, // 1 bits opcode of the instruction

    output logic Reg2Loc, ALUSrc, Mem2Reg, RegWrite, MemWrite, MemRead, // control signals covered in class
    output logic store_pc, // 0 if from MemtoReg, 1 from the process counter, we will need this for BL instruction
    output logic update_flags, // whether we need to update the flags
    output logic d_type, // 0 if it's I-type, 1 if it's D-type, x if neither, to select source for the mux of ALUSrc
    output logic br_cond, // 0 if cbz, 1 if b.lt, x if neither

    output logic [1:0] br_type, // 00 for pc_plus_4, 01 for cond_br_addr or pc_plus_4 depend on the flag and cond, 10 for uncond_br_addr, 11 for reg_read_data_2
    output logic [2:0] ALUop,
	 output logic [3:0] mem_xfer_size
);

    // define the opcode for each instruction
    parameter [10:0]
                ADDI    =   11'b1001000100x, 
                ADDS    =   11'b10101011000, 
                B       =   11'b000101xxxxx,
                B_LT    =   11'b01010100xxx,
                BL      =   11'b100101xxxxx,
                BR      =   11'b11010110000,
                CBZ     =   11'b10110100xxx,
                LDUR    =   11'b11111000010,
                STUR    =   11'b11111000000,
                SUBS    =   11'b11101011000,
                NOP     =   11'b00000000000;

    always_comb 
		begin
            casex (opcode)
                ADDI: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'b1;
                    Mem2Reg = 1'b0;
                    RegWrite = 1'b1;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;
                    d_type = 1'b0;
                    br_cond = 1'bx;
                    br_type = 2'b00;
                    ALUop = 3'b010;
						  mem_xfer_size = 4'bx;
                end

                ADDS: begin
                    Reg2Loc = 1'b1;
                    ALUSrc = 1'b0;
                    Mem2Reg = 1'b0;
                    RegWrite = 1'b1;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b1;
                    store_pc = 1'b0;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'b00;
                    ALUop = 3'b010;
						  mem_xfer_size = 4'bx;
                end

                B: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'bx;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b0;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'b10;
                    ALUop = 3'bx; // don't care
						  mem_xfer_size = 4'bx;
                end

                B_LT: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'bx;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b0;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;;
                    d_type = 1'bx;
                    br_cond = 1'b1;
                    br_type = 2'b01;
                    ALUop = 3'bx; // don't care
                    mem_xfer_size = 4'bx;
                end

                BL: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'bx;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b1;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b1;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'b10;
                    ALUop = 3'b000; // bypass B
                    mem_xfer_size = 4'bx;
                end

                BR: begin
                    Reg2Loc = 1'b0;
                    ALUSrc = 1'bx;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b0;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'b11;
                    ALUop = 3'bx; // don't care
						  mem_xfer_size = 4'bx;
                end

                CBZ: begin
                    Reg2Loc = 1'b0;
                    ALUSrc = 1'b0;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b0;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;;
                    d_type = 1'bx;
                    br_cond = 1'b0;
                    br_type = 2'b01;
                    ALUop = 3'b000; // bypass B
						  mem_xfer_size = 4'bx;
                end

                LDUR: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'b1;
                    Mem2Reg = 1'b1;
                    RegWrite = 1'b1;
                    MemWrite = 1'b0;
                    MemRead = 1'b1;
                    update_flags = 1'b0;
                    store_pc = 1'b0;
                    d_type = 1'b1;
                    br_cond = 1'bx;
                    br_type = 2'b00;
                    // pc_from_reg = 1'b0;
                    ALUop = 3'b010; // add
						  mem_xfer_size = 4'b1000;
                end

                STUR: begin
                    Reg2Loc = 1'b0;
                    ALUSrc = 1'b1;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'b0;
                    MemWrite = 1'b1;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;;
                    d_type = 1'b1;
                    br_cond = 1'bx;
                    br_type = 2'b00;
                    ALUop = 3'b010; // add
						  mem_xfer_size = 4'b1000;
                end

                SUBS: begin
                    Reg2Loc = 1'b1;
                    ALUSrc = 1'b0;
                    Mem2Reg = 1'b0;
                    RegWrite = 1'b1;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b1;
                    store_pc = 1'b0;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'b00;
                    ALUop = 3'b011;
						  mem_xfer_size = 4'bx;
                end

                NOP: begin // set all signals to 0, could be improved but not really important
                    Reg2Loc = 1'b0;
                    ALUSrc = 1'b0;
                    Mem2Reg = 1'b0;
                    RegWrite = 1'b0;
                    MemWrite = 1'b0;
                    MemRead = 1'b0;
                    update_flags = 1'b0;
                    store_pc = 1'b0;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'bx;
                    ALUop = 3'bx;
                    mem_xfer_size = 4'bx;
                end


                default: begin
                    Reg2Loc = 1'bx;
                    ALUSrc = 1'bx;
                    Mem2Reg = 1'bx;
                    RegWrite = 1'bx;
                    MemWrite = 1'bx;
                    MemRead = 1'bx;
                    update_flags = 1'bx;
                    store_pc = 1'bx;
                    d_type = 1'bx;
                    br_cond = 1'bx;
                    br_type = 2'bx;
                    ALUop = 3'bx;
						  mem_xfer_size = 4'bx;
                end

            endcase
        end

endmodule // data_path_logic